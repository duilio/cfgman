name: Tests

on:
  push:
    paths-ignore:
      - "docs/**"
    branches:
      - main
  pull_request:
    paths-ignore:
      - "docs/**"
    branches:
      - "**"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Get full Python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0
          virtualenvs-in-project: true

      - name: Set up cache for python dependencies
        uses: actions/cache@v3
        id: cache-venv
        with:
          path: .venv
          key: pydeps-lint-Ubuntu-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache-venv.outputs.cache-hit == 'true'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --only main --only test -vvv

      - name: Get pre-commit version
        id: pre-commit-version
        run: |
          echo ::set-output name=version::$(poetry run pre-commit --version)

      - name: Set up cache for pre-commit
        uses: actions/cache@v3
        id: cache-pre-commit
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-Ubuntu-${{ steps.full-python-version.outputs.version }}-${{ steps.pre-commit-version.outputs-version }}-${{ hashFiles('**/.pre-commit-config.yaml') }}

      - name: Lint
        run: |
          ./scripts/lint

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [Ubuntu, MacOS, Windows]
        python-version: ["3.10"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: |
          echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0
          virtualenvs-in-project: true

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: pydeps-test-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        # MacOS does not come with `timeout` command out of the box
        if: steps.cache.outputs.cache-hit == 'true' && matrix.os != 'MacOS'
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        run: poetry install --only main --only test -E all -vvv

      - name: Test with pytest
        run: |
          ./scripts/test -v --cov --cov-report=term
